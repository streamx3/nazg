#!/usr/bin/env python

import os
import sys
from collections import defaultdict

const_make_string = "make && make install"
const_debug_gdb = 'gdb --silent -x ../debug/test-list.txt'
const_debug_lldb = 'lldb ../out/bin/test-list'

debug_options = {
    'd': const_debug_gdb,
    'd_gdb': const_debug_gdb,
    'd_lldb': const_debug_lldb
}
debug_options = defaultdict(lambda: const_debug_gdb, debug_options)

def fn_help(cmd):
	print '\nAvailable options are:'
	print '\tb build			-- build without debug symbols'
	print '\tbd build_debug		-- build without debug symbols'
	print '\th help				-- display help'
	print '\tc clean			-- clean the build'
	print '\td debug			-- start default debug session'
	print '\td_gdb debug_gdb	-- start debug with GDB'
	print '\td_lldb debug_lldb	-- start debug with LLVM Debugger'
	print ' '


def build(cmd):
	print "Building non-debug..."
	os.system("cmake .. && " + const_make_string)
	return None


def build_debug(cmd):
	print "Building debug..."
	os.system("cmake -DCMAKE_BUILD_TYPE=Debug .. && " + const_make_string)
	return None


def clean(cmd):
	os.system("for a in `ls | grep -v run` ; do rm -rfv $a; done && rm -rfv ../out")
	return None


def debug(cmd):
	os.system(debug_options[cmd])
	return None


def execute(cmd):
	return os.system("../out/bin/test-list")


def wrong_option(cmd):
	print 'Wrong option \'' + cmd + '\'!'
	fn_help("ololo1")
	exit(1)


options = {'b': build,
		   'build': build,
		   'bd': build_debug,
		   'build_debug': build_debug,
		   'e': execute,
		   'exec': execute,
		   'h': fn_help,
		   'help': fn_help,
		   'c': clean,
		   'clean': clean,
		   'd': debug,
		   'debug': debug,
		   'd_gdb': debug,
		   'debug_gdb': debug,
		   'd_lldb': debug,
		   'debug_lldb': debug
}

options = defaultdict(lambda: wrong_option, options)

for cmd in sys.argv:
	if cmd != sys.argv[0]:
		options[cmd](cmd)