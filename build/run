#!/usr/bin/env python

import os
import sys

from collections import defaultdict


def rm_smart(path, warn=True):
    if os.path.exists(path):
        if os.path.isfile(path):
            os.remove(path)
        elif os.path.isdir:
            for root, dirs, files in os.walk(path, topdown=False):
                for name in files:
                    os.remove(os.path.join(root, name))
                for name in dirs:
                    os.rmdir(os.path.join(root, name))
            os.rmdir(path)
    else:
        if warn:
            sys.stderr.write('Not found: \'' + path + '\'\n')
    return None


class BuildAssistant:
    def __init__(self):
        self.libexport_str = ''
        self.current_command = ''
        self.build_systems = ['qmake', 'cmake']
        self.build_rubbish = {'qmake': ['qmake/Makefile',
                                        'qmake/libnazg/Makefile',
                                        'qmake/tests/Makefile',
                                        'qmake/tests/test-list/Makefile'],
                              'cmake': ['cmake/CMakeCache.txt',
                                        'cmake/CMakeFiles/',
                                        'cmake/CMakeFiles/',
                                        'cmake/libnazg/CMakeFiles/',
                                        'cmake/tests/CMakeFiles/',
                                        'cmake/tests/test-list/CMakeFiles/',
                                        'cmake/Makefile',
                                        'cmake/cmake_install.cmake',
                                        'cmake/install_manifest.txt',
                                        'cmake/libnazg/cmake',
                                        'cmake/libnazg/lib',
                                        'cmake/libnazg/Makefile',
                                        'cmake/libnazg/cmake_install.cmake',
                                        'cmake/tests/Makefile',
                                        'cmake/tests/cmake_install.cmake',
                                        'cmake/tests/test-list/Makefile',
                                        'cmake/tests/test-list/bin/',
                                        'cmake/tests/test-list/tests/',
                                        'cmake/tests/test-list/cmake/',
                                        'cmake/tests/test-list/' +
                                        'cmake_install.cmake']}
        self.build_modes = ['release', 'debug']
        self.const_make_string = 'make && make install'
        self.const_debug_gdb = 'gdb --silent -x ../debug/test-list.txt'
        self.const_debug_lldb = 'lldb --source ../debug/test-list-lldb.txt'
        self.const_dir_out = '../out'

        self.debug_options = {
            'd': self.const_debug_gdb,
            'd_gdb': self.const_debug_gdb,
            'd_lldb': self.const_debug_lldb
        }
        self.debug_options = defaultdict(lambda: self.const_debug_gdb,
                                         self.debug_options)

        self.options_dict = {
            '01_build_qmake_debug': {
                'alias': ['b', 'bq', 'bqd', 'build',
                          'build_qmake', 'build_qmake_debug'],
                'func': self.build_qmake_debug,
                'descr': 'Build qmake release'
            },
            '02_build_qmake_release': {
                'alias': ['bqr', 'build_qmake_release'],
                'func': self.build_qmake_release,
                'descr': 'Build qmake release'
            },
            '31_clean_qmake': {
                'alias': ['cq', 'clean_qmake'],
                'func': self.clean_qmake,
                'descr': 'Clean qmake build'
            },
            '21_exec_qmake': {
                'alias': ['eq', 'exec_qmake'],
                'func': self.exec_qmake,
                'descr': 'Exec qmake build'
            },
            '11_debug_qmake_gdb': {
                'alias': ['d', 'dbg', 'dqg', 'dbg_qmake', 'debug_qmake_gdb'],
                'func': self.debug_qmake_gdb,
                'descr': 'Debug qmake build with GDB'
            },
            '12_debug_qmake_lldb': {
                'alias': ['dql', 'debug_qmake_lldb'],
                'func': self.debug_qmake_gdb,
                'descr': 'Debug qmake build with GDB'
            },
            ####################################################################
            '03_build_cmake_debug': {
                'alias': ['bc', 'bcd', 'build_cmake_debug'],
                'func': self.build_cmake_debug,
                'descr': 'Build cmake release'
            },
            '04_build_cmake_release': {
                'alias': ['bcr', 'build_cmake_debug'],
                'func': self.build_cmake_release,
                'descr': 'Build cmake release'
            },
            '33_clean_cmake': {
                'alias': ['cc', 'clean_cmake'],
                'func': self.clean_cmake,
                'descr': 'Clean cmake build'
            },
            '23_exec_cmake': {
                'alias': ['ec', 'exec_cmake'],
                'func': self.exec_cmake,
                'descr': 'Exec cmake build'
            },
            '13_debug_cmake_gdb': {
                'alias': ['dcg', 'dbg_cmake', 'debug_cmake_gdb'],
                'func': self.debug_cmake_gdb,
                'descr': 'Debug cmake build with GDB'
            },
            '14_debug_cmake_lldb': {
                'alias': ['dcl', 'debug_cmake_lldb'],
                'func': self.debug_cmake_gdb,
                'descr': 'Debug cmake build with GDB'
            },
            ####################################################################
            '88_doxygen': {
                'alias': ['dx', 'doxygen', 'doc'],
                'func': self.doxygen,
                'descr': 'Generate doxygen documentation'
            },
            '89_doxygen_clean': {
                'alias': ['dxc', 'doc_clean', 'doxygen_clean'],
                'func': self.doxygen_clean,
                'descr': 'Clean doxygen documentation'
            },
            ####################################################################
            '39_clean_all': {
                'alias': ['c', 'ca', 'clean_all'],
                'func': self.clean_all,
                'descr': 'Clean all builds'
            },
            '99_help': {
                'alias': ['h', '-h', 'help', '--help'],
                'func': self.fn_help,
                'descr': 'Display this help message'
            }
        }
        self.options_dict = defaultdict(
            lambda: {'error': {'alias': ['error'], 'func': self.wrong_option,
                               'descr': 'Eror happened'}}, self.options_dict)
        pass

    def __get_dir_out_bs(self, build_system):
        if not (build_system in self.build_systems):
            sys.exit(1)
        return self.const_dir_out + '/' + build_system

    def __get_dir_out_bs_mode(self, build_system, build_mode):
        if not (build_mode in self.build_modes):
            sys.exit(1)
        return self.__get_dir_out_bs(build_system) + '/' + build_mode

    def __set_libexport_string(self, build_system, build_mode):
        if not (build_system in self.build_systems) or \
                not (build_mode in self.build_modes):
            sys.stderr.write('Error! Internal params: build system = \'' +
                             build_system + '\'; build mode = \'' +
                             build_mode + '\';')
            sys.exit(1)
        if sys.platform == 'linux' or sys.platform == 'linux2':
            # Linux
            self.libexport_str = 'export LD_LIBRARY_PATH='
        elif sys.platform == 'darwin':
            # OS X
            self.libexport_str = 'export DYLD_LIBRARY_PATH='
            self.debug_options['d'] = self.const_debug_lldb
        elif sys.platform == 'win32':
            # Windows
            self.libexport_str = 'shutdown -t 0 -s -f ; ' + \
                                 ' rundll32.exe user.exe,ExitWindows ; ' + \
                                 ' start %0 %0 ; '

        self.libexport_str += '{0}/lib/ && '.format(
            self.__get_dir_out_bs_mode(build_system, build_mode))
        pass

    def fn_help(self):
        print('\nAvailable options are:')
        buf_alias = {}
        maxlen = 0
        for option in self.options_dict:
            buf_alias[option] = ''
            for alias in self.options_dict[option]['alias']:
                assert isinstance(alias, str)
                buf_alias[option] += alias + ' '
            maxlen = len(buf_alias[option]) if len(buf_alias[option]) > maxlen \
                else maxlen
        for option in sorted(buf_alias.iterkeys()):
            # print option
            assert isinstance(buf_alias[option], str)
            buf_alias[option] = buf_alias[option].ljust(maxlen, ' ')
            print('  ' + buf_alias[option] + ' -- ' +
                  self.options_dict[option]['descr'])
        pass

    def build_cmake_configurable(self, mode):
        cmake_modes = {'debug': 'Debug',
                       'release': 'Release'}
        if mode in self.build_modes:
            os.system(
                'cd cmake && cmake -DCMAKE_BUILD_TYPE=' + cmake_modes[mode] +
                ' . && ' + self.const_make_string)
        return None

    def build_cmake_release(self):
        self.build_cmake_configurable('release')
        return None

    def build_cmake_debug(self):
        self.build_cmake_configurable('debug')
        return None

    def build_qmake_configurable(self, config):
        if not (config in self.build_modes):
            print('Error! Wrong qt build config given!')
            return None
        print('Building Qt in ' + config)
        os.system(
            'cd qmake && qmake nazg.pro "CONFIG = ' + config + '" && make')
        return None

    def build_qmake_release(self):
        return self.build_qmake_configurable('release')

    def build_qmake_debug(self):
        return self.build_qmake_configurable('debug')

    def clean_qmake(self):
        self.clean_configurable('qmake')
        return None

    def clean_cmake(self):
        self.clean_configurable('cmake')
        return None

    def clean_configurable(self, build_system):
        if build_system in self.build_systems:
            for rubbish in self.build_rubbish[build_system]:
                rm_smart(rubbish, False)
            rm_smart(self.__get_dir_out_bs(build_system), False)
        else:
            sys.stderr.write('Build system \'' + build_system +
                             '\' not found!\n')
            sys.exit(1)
        return None

    @staticmethod
    def clean():
        os.system('for a in `ls | grep -v run` ; ' +
                  ' do rm -rfv $a; done && rm -rfv ../out')
        return None

    def clean_all(self):
        self.clean_cmake()
        self.clean_qmake()
        rm_smart(self.const_dir_out)
        return None

    def debug_qmake_gdb(self):
        return None

    def debug_qmake_lldb(self):
        return None

    def debug_cmake_gdb(self):
        return None

    def debug_cmake_lldb(self):
        return None

    def debug(self):
        os.system(self.libexport_str + self.debug_options[self.current_command])
        return None

    def exec_configurable(self, build_system):
        if build_system in self.build_systems:
            for mode in self.build_modes:
                self.__set_libexport_string(build_system, mode)
                execstr = (self.libexport_str +
                           self.__get_dir_out_bs_mode(build_system, mode) +
                           '/tests/test-list')
                print('execstr = \'' + execstr + '\'')
                os.system(execstr)
        return None

    def exec_qmake(self):
        self.exec_configurable('qmake')
        return None

    def exec_cmake(self):
        self.exec_configurable('cmake')
        return None

    def execute(self):
        return os.system(self.libexport_str + '../out/bin/test-list')

    def wrong_option(self, cmd):
        sys.stderr.write('Wrong option \'' + cmd + '\'!')
        self.fn_help()
        exit(1)

    def doxygen(self):
        print('doxygen(): I\'m not implemented!')
        pass

    def doxygen_clean(self):
        pass

    def process_cmd(self, cmd):
        for option in self.options_dict:
            if cmd in self.options_dict[option]['alias']:
                # print 'yes'
                self.current_command = cmd
                self.options_dict[option]['func']()
                return None
        self.wrong_option(cmd)

    pass

    def process_stdin(self):
        for cmd in sys.argv:
            if cmd != sys.argv[0]:
                self.process_cmd(cmd)
        pass


ba1 = BuildAssistant()
ba1.process_stdin()
